services:
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    container_name: rabbitmq
    restart: always
    networks:
      - rss_network
    ports:
      - 5672:5672
      - 15672:15672

  db:
    image: postgres:14.9
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    container_name: postgres
    restart: always
    networks:
      - rss_network
    ports:
      - 5432:5432

  elasticsearch:
    image: elasticsearch:8.10.2
    container_name: elasticsearch
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    restart: always
    networks:
      - rss_network
    ports:
      - 9200:9200

  kibana:
    image: kibana:8.10.2
    container_name: kibana
    volumes:
      - kibana_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    restart: always
    networks:
      - rss_network
    ports:
      - 5601:5601

  redis:
    image: redis:7.2
    volumes:
      - redis_data:/data
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    container_name: redis
    networks:
      - rss_network
    ports:
      - 6380:6379

  app:
    build: .
    volumes:
      - .:/app
    env_file:
      - .env
    container_name: rss_app
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - rabbitmq
      - db
      - redis
    networks:
      - rss_network
    ports:
      - 8000:8000

  celery:
    build: .
    volumes:
      - .:/app
    environment:
      - C_FORCE_ROOT="True"
    container_name: celery
    command: "celery -A config worker -l INFO"
    depends_on:
      - db
      - redis
      - app
    restart: always
    networks:
      - rss_network

  celery_beat:
    build: .
    volumes:
      - .:/app
    container_name: celery_beat
    command: "celery -A config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - db
      - redis
      - app
    restart: always
    networks:
      - rss_network

  register_consumer:
    build: .
    env_file:
      - .env
    container_name: register_consumer
    command: "python manage.py runconsumer register"
    depends_on:
      - rabbitmq
      - app
    restart: always
    networks:
      - rss_network

  login_consumer:
    build: .
    env_file:
      - .env
    container_name: login_consumer
    command: "python manage.py runconsumer login"
    depends_on:
      - rabbitmq
      - app
    restart: always
    networks:
      - rss_network


networks:
  rss_network:

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  rabbitmq_log: